ofekwa



=============================
=      File description     =
=============================


=============================
=          Design           =
=============================

Our main design principle was building a syntax tree: creating sort of syntax graph and while constructing
each of the syntax object, an IllegalSyntaxException can be thrown, noting the file is illegal.

Our programs reads the file, and creates a list
(ArrayList) of all the lines of the file. It is done while deleting all the unnecessary white spaces to make
the strings easier to work with. After that we pass the lines to the root scope. Scopes are objects that
generally define the name space of variables; Each scope has a collection of all the variables method that his
father scope has (except for root that has only it's own variables). After passing the lines to root scope,
it scans the lines, creating methods and variables (without scanning the lines of the methods). Then there is
a second scan, for each of the methods. in each method the scan scans the line and if there is another scope
block (if/while) it opens a new scope and scans it's lines.

It is important to notice the scanning is made inside a parser class that scans the code lines one by one.
When finished scanning, it goes  back to the outer scope. When the scanning of the root lines, the program
returns a result of a valid file.

=============================
=  Implementation details   =
=============================


=============================
=    Answers to questions   =
=============================

====================
=   Question 6.1   =
====================

The main exception we threw in our code is the IllegalSyntaxException, that was thrown every time the syntax
was not compatible with the s-Java code specifications. This exception requires an informative message that is
defined in part of the code that threw the exception. There were other exceptions that could be thrown in the
code, not directly because of wrong syntax, but rather because of trying to match the code lines to a
certain pattern we expect from the s-Java. We handled these potential, many exceptions with using many
conditions that check if an exception could be thrown, and if so - an IllegalSyntaxException is thrown because
the conditions manage the flow of the program so if there is any chance the code written in the file is
correct - it will find it legal.

====================
=   Question 6.2   =
====================

Our object oriented design was fairly simple: There is a an abstract class called SyntaxObject, the only thing
it requires from it's descendants to implement is a constructor that throws the IllegalSyntaxException. That
means the every syntax object, while being constructed, can throw the exception to notify the program there is
a syntax error - otherwise the code is legal. There are few general syntax objects: CodeLine, Condition,
MethodDeclaration. In addition there are scopes, Scopes are objects that define the name space of
variables; Each scope has a collection of all the variables method that his father scope has (except for
root that has only it's own variables). The scope types are: Root, Method and IfWhile (if and while are
combined because there is no real difference between them).

We thought of few partially \ totally different designs:
~~~~~
~~~~~
~~~~~ add bullshit alternatives!!!!!!!
~~~~~
~~~~~

If we wanted to add more variables, we need to:
1. Add them to the type enum.
2. Add the relevant regexes and patterns that can check if a certain input is valid.
3. Add them to the switch case in the CodeLine class.

If we wanted to add different method types:

====================
=   Question 6.3   =
====================


